name: Update API Config
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  GITHUB_ENV: $GITHUB_ENV
  GITHUB_OUTPUT: $GITHUB_OUTPUT
jobs:
  update_api:
    runs-on: ubuntu-latest
    environment: DEMO
    outputs:
      IMPORT_CONFIG_FILES: ${{ steps.define_matrix_config_files.outputs.IMPORT_CONFIG_FILES }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Get changes
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -v '^.github/workflows/' | grep -v '^pyscripts/' | paste -sd ',')
          echo "CHANGES=$CHANGES" >> $GITHUB_ENV
          echo "CHANGES: $CHANGES"

      - name: Get Config Files and Check API Status
        id: define_matrix_config_files
        env:
          CHANGES: ${{ env.CHANGES }}
          APIM_INSTANCE_IP: ${{ vars.APIM_INSTANCE_IP }}
          APIM_INSTANCE_USER: ${{ vars.APIM_INSTANCE_USER }}
          APIM_INSTANCE_PASSWORD: ${{ secrets.APIM_INSTANCE_PASSWORD }}
        run: |
          set -e
          UPDATE_CONFIG_FILES=()
          IMPORT_CONFIG_FILES=()
          
          # Extract config files and swagger files from changes
          config_files=()
          swagger_files=()
          
          for file in $(echo "$CHANGES" | tr ',' ' '); do
            if [[ "$file" == *"-config"* ]]; then
              config_files+=("$file")
            elif [[ "$file" == *"openapi"* ]] || [[ "$file" == *"swagger"* ]] || [[ "$file" == *.json ]] && [[ "$file" != *"-config"* ]]; then
              swagger_files+=("$file")
            fi
          done
          
          # If swagger files changed, find their corresponding config files
          if [ ${#swagger_files[@]} -gt 0 ]; then
            echo "Found ${#swagger_files[@]} swagger files: ${swagger_files[*]}"
            echo "Looking for corresponding config files..."
            
            for swagger_file in "${swagger_files[@]}"; do
              # Find config files that reference this swagger file
              for config_file in examples/APIs/*-config.*; do
                if [ -f "$config_file" ]; then
                  # Extract the resource path from config file
                  if [[ "$config_file" == *.yaml ]] || [[ "$config_file" == *.yml ]]; then
                    resource_path=$(yq -r '.apiSpecification.resource' "$config_file" 2>/dev/null || echo "")
                  else
                    resource_path=$(jq -r '.apiSpecification.resource' "$config_file" 2>/dev/null || echo "")
                  fi
                  
                  # Check if this config file references the changed swagger file
                  if [[ "$resource_path" == *"$(basename "$swagger_file")"* ]]; then
                    echo "Found config file $config_file that references swagger $swagger_file"
                    if [[ ! " ${config_files[@]} " =~ " ${config_file} " ]]; then
                      config_files+=("$config_file")
                    fi
                  fi
                fi
              done
            done
          fi
          
          if [ ${#config_files[@]} -eq 0 ]; then
            echo "No config files found in changes or related to changed swagger files"
            echo "UPDATE_CONFIG_FILES=[]" >> $GITHUB_ENV
            echo "IMPORT_CONFIG_FILES=[]" >> $GITHUB_ENV
            echo "IMPORT_CONFIG_FILES=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found ${#config_files[@]} config files to process: ${config_files[*]}"
          
          for file in "${config_files[@]}"; do
            if [ -f "$file" ]; then
              # Detect file type and extract path accordingly
              if [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]]; then
                # Use yq for YAML files
                path=$(yq -r '.path' "$file" 2>/dev/null || echo "")
              else
                # Use jq for JSON files
                path=$(jq -r '.path' "$file" 2>/dev/null || echo "")
              fi
              
              if [ -z "$path" ]; then
                echo "Warning: Could not extract path from $file"
                continue
              fi
              
              echo "Verificando exist√™ncia da API com path: $path"
              result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim api get -h "$APIM_INSTANCE_IP" -u "$APIM_INSTANCE_USER" -port 8075 -p "$APIM_INSTANCE_PASSWORD" -a "$path" 2>/dev/null || echo "")
              if echo "$result" | grep -q "$path"; then
                UPDATE_CONFIG_FILES+=("$file")
                echo "API exists - will update: $file"
              else
                IMPORT_CONFIG_FILES+=("$file")
                echo "API does not exist - will import: $file"
              fi
            else
              echo "Warning: File not found: $file"
            fi
          done
          
          echo "UPDATE_CONFIG_FILES=$(jq -c -n '$ARGS.positional' --args "${UPDATE_CONFIG_FILES[@]}")" >> $GITHUB_ENV
          echo "IMPORT_CONFIG_FILES=$(jq -c -n '$ARGS.positional' --args "${IMPORT_CONFIG_FILES[@]}")" >> $GITHUB_ENV
          echo "IMPORT_CONFIG_FILES=$(jq -c -n '$ARGS.positional' --args "${IMPORT_CONFIG_FILES[@]}")" >> $GITHUB_OUTPUT

      - name: Validate Dependencies for Updates
        if: env.UPDATE_CONFIG_FILES != ''
        run: |
          files=$(echo '${{ env.UPDATE_CONFIG_FILES }}' | jq -r '.[]')
          for file in $files; do
            echo "üîç Validating dependencies for: $file"
            
            # Extract organization from config file
            if [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]]; then
              organization=$(yq -r '.organization' "$file" 2>/dev/null || echo "")
            else
              organization=$(jq -r '.organization' "$file" 2>/dev/null || echo "")
            fi
            
            if [ -n "$organization" ]; then
              echo "üè¢ Checking organization: $organization"
              
              # Check if organization exists
              result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim org get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -n "$organization" 2>/dev/null || echo "")
              
              if ! echo "$result" | grep -q "$organization"; then
                echo "‚ùå Organization '$organization' does not exist - will create it"
                
                # Look for organization config file
                org_file="examples/Orgs/${organization,,}-org.json"
                if [ -f "$org_file" ]; then
                  echo "üìÅ Creating organization from: $org_file"
                  
                  # Extract and create organization
                  org_name=$(jq -r '.name' "$org_file")
                  org_description=$(jq -r '.description' "$org_file")
                  org_email=$(jq -r '.email' "$org_file")
                  org_phone=$(jq -r '.phone' "$org_file")
                  org_enabled=$(jq -r '.enabled' "$org_file")
                  org_development=$(jq -r '.development' "$org_file")
                  
                  docker run --name apim-cli \
                  -e LOG_LEVEL=DEBUG \
                  bvieira123/apim-cli:1.14.4 \
                  apim org create -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 \
                  -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" \
                  --name "$org_name" \
                  --description "$org_description" \
                  --email "$org_email" \
                  --phone "$org_phone" \
                  --enabled "$org_enabled" \
                  --development "$org_development"
                  
                  docker rm apim-cli -f
                  echo "‚úÖ Organization '$org_name' created successfully!"
                else
                  echo "‚ùå No organization config file found: $org_file"
                  exit 1
                fi
              else
                echo "‚úÖ Organization '$organization' exists"
              fi
            fi
          done

      - name: Update APIs
        if: env.UPDATE_CONFIG_FILES != ''
        run: |
          files=$(echo '${{ env.UPDATE_CONFIG_FILES }}' | jq -r '.[]')
          for file in $files; do
            echo "Getting API definition..."
            config_file_name=$(basename "$file")
            current_folder=$(dirname "$file")
            
            # Detect file type and extract API definition accordingly
            if [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]]; then
              # Use yq for YAML files
              API_DEFINITION=$(yq -r '.apiSpecification.resource' "$file")
              path=$(yq -r '.path' "$file")
            else
              # Use jq for JSON files
              API_DEFINITION=$(jq -r '.apiSpecification.resource' "$file")
              path=$(jq -r '.path' "$file")
            fi
            
            echo "Updating API with apim-cli using config file: $file"
            docker run --name apim-cli \
            -e LOG_LEVEL=DEBUG -v "${{ github.workspace }}/$file:/$config_file_name" \
            -v "${{ github.workspace }}/$current_folder/$API_DEFINITION:/$API_DEFINITION" bvieira123/apim-cli:1.14.4  \
            apim api import -h ${{ vars.APIM_INSTANCE_IP }} -u ${{ vars.APIM_INSTANCE_USER }} -port 8075 \
            -p ${{ secrets.APIM_INSTANCE_PASSWORD }} -c "/$config_file_name" -force
            docker rm apim-cli -f
          done
          echo "All APIs updated successfully..."
  trigger_import:
    needs: update_api
    strategy:
      matrix:
        IMPORT_CONFIG_FILE: ${{fromJson(needs.update_api.outputs.IMPORT_CONFIG_FILES)}}
    if: ${{ needs.update_api.outputs.IMPORT_CONFIG_FILES != '' }}
    uses: ./.github/workflows/import-api.yaml
    with:
      config-file: ${{ matrix.IMPORT_CONFIG_FILE }}
    secrets: inherit
