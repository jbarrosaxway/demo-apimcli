name: Update API Config
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  GITHUB_ENV: $GITHUB_ENV
  GITHUB_OUTPUT: $GITHUB_OUTPUT
jobs:
  update_api:
    runs-on: ubuntu-latest
    outputs:
      IMPORT_CONFIG_FILES: ${{ steps.define_matrix_config_files.outputs.IMPORT_CONFIG_FILES }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt

      - name: Get changes
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -v '^.github/workflows/' | grep -v '^pyscripts/' | paste -sd ',')
          echo "CHANGES=$CHANGES" >> $GITHUB_ENV
          echo "CHANGES: $CHANGES"

      - name: Get Config Files
        env:
          CHANGES: ${{ env.CHANGES }}
        run: python ./pyscripts/get-config-files.py

      - name: Check if config file is new or is an update
        id: define_matrix_config_files
        env:
          CONFIG_FILES: ${{ env.CONFIG_FILES }}
          APIM_INSTANCE_IP: ${{ vars.APIM_INSTANCE_IP }}
          APIM_INSTANCE_USER: ${{ vars.APIM_INSTANCE_USER }}
          APIM_INSTANCE_PASSWORD: ${{ secrets.APIM_INSTANCE_PASSWORD }}
        run: |
          set -e
          UPDATE_CONFIG_FILES=()
          IMPORT_CONFIG_FILES=()
          for file in $(echo $CONFIG_FILES | jq -r '.[]'); do
            path=$(jq -r '.path' "$file")
            echo "Verificando existÃªncia da API com path: $path"
            result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim api get -h "$APIM_INSTANCE_IP" -u "$APIM_INSTANCE_USER" -port 8075 -p "$APIM_INSTANCE_PASSWORD" -a "$path")
            if echo "$result" | grep -q "$path"; then
              UPDATE_CONFIG_FILES+=("$file")
            else
              IMPORT_CONFIG_FILES+=("$file")
            fi
          done
          echo "UPDATE_CONFIG_FILES=$(jq -c -n '$ARGS.positional' --args "${UPDATE_CONFIG_FILES[@]}")" >> $GITHUB_ENV
          echo "IMPORT_CONFIG_FILES=$(jq -c -n '$ARGS.positional' --args "${IMPORT_CONFIG_FILES[@]}")" >> $GITHUB_ENV
          echo "IMPORT_CONFIG_FILES=$(jq -c -n '$ARGS.positional' --args "${IMPORT_CONFIG_FILES[@]}")" >> $GITHUB_OUTPUT

      - name: Update APIs
        if: env.UPDATE_CONFIG_FILES != ''
        run: |
          files=$(echo '${{ env.UPDATE_CONFIG_FILES }}' | jq -r '.[]')
          for file in $files; do
            echo "Getting API definition..."
            config_file_name=$(basename "$file")
            current_folder=$(dirname "$file")
            API_DEFINITION=$(jq -r '.apiSpecification.resource' "$file")
            path=$(jq -r '.path' "$file")
            echo "Updating API with apim-cli using config file: $file"
            docker run --name apim-cli \
            -e LOG_LEVEL=DEBUG -v "${{ github.workspace }}/$file:/$config_file_name" \
            -v "${{ github.workspace }}/$current_folder/$API_DEFINITION:/$API_DEFINITION" bvieira123/apim-cli:1.14.4  \
            apim api import -h ${{ vars.APIM_INSTANCE_IP }} -u ${{ vars.APIM_INSTANCE_USER }} -port 8075 \
            -p ${{ secrets.APIM_INSTANCE_PASSWORD }} -c "/$config_file_name" -force
            docker rm apim-cli -f
          done
          echo "All APIs updated successfully..."
  trigger_import:
    needs: update_api
    strategy:
      matrix:
        IMPORT_CONFIG_FILE: ${{fromJson(needs.update_api.outputs.IMPORT_CONFIG_FILES)}}
    if: ${{ needs.update_api.outputs.IMPORT_CONFIG_FILES != '' }}
    uses: ./.github/workflows/import-api.yaml
    with:
      config-file: ${{ matrix.IMPORT_CONFIG_FILE }}
    secrets: inherit
