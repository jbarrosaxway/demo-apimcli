name: import-api-intelligent
on:
  workflow_call:
    inputs:
      config-file:
        description: "config file need to be imported"
        type: string
        required: true
  workflow_dispatch:
    inputs:
      config-file:
        description: "config file need to be imported"
        type: string
        required: true

jobs:
  validate_dependencies:
    uses: ./.github/workflows/validate-dependencies.yaml
    with:
      config-file: ${{ inputs.config-file }}
    secrets: inherit

  import_api:
    needs: validate_dependencies
    runs-on: ubuntu-latest
    environment: DEMO
    steps:
      - name: checkout
        uses: actions/checkout@v4
        
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Extract API information
        id: api_info
        run: |
          echo "Getting API definition..."
          echo "Processing ${{ inputs.config-file }} config file"
          config_file_name=$(basename ${{ inputs.config-file }})
          current_folder=$(dirname ${{ inputs.config-file }})
          
          # Detect file type and extract API definition accordingly
          if [[ "${{ inputs.config-file }}" == *.yaml ]] || [[ "${{ inputs.config-file }}" == *.yml ]]; then
            # Use yq for YAML files
            API_DEFINITION_FILE_NAME=$(yq -r '.apiSpecification.resource' ${{ inputs.config-file }} | xargs basename)
            path=$(yq -r '.path' ${{ inputs.config-file }})
          else
            # Use jq for JSON files
            API_DEFINITION_FILE_NAME=$(jq -r '.apiSpecification.resource' ${{ inputs.config-file }} | xargs basename)
            path=$(jq -r '.path' ${{ inputs.config-file }})
          fi
          
          echo "API definition: $API_DEFINITION_FILE_NAME"
          echo "API path: $path"
          
          # Set outputs for next steps
          echo "api_definition_file_name=$API_DEFINITION_FILE_NAME" >> $GITHUB_OUTPUT
          echo "api_path=$path" >> $GITHUB_OUTPUT

      - name: Import API using APIM CLI Action
        id: import_api
        uses: ./.github/actions/apim-cli
        with:
          command: apim api import -h ${{ vars.APIM_INSTANCE_IP }} -u ${{ vars.APIM_INSTANCE_USER }} -port ${{ vars.APIM_INSTANCE_PORT || '8075' }} -p ${{ secrets.APIM_INSTANCE_PASSWORD }} -c ${{ inputs.config-file }}
          log_level: DEBUG
          port: ${{ vars.APIM_INSTANCE_PORT || '8075' }}

      - name: Handle import result
        run: |
          EXIT_CODE=${{ steps.import_api.outputs.exit_code }}
          echo "Import completed with exit code: $EXIT_CODE"
          
          # Use intelligent error handling
          source scripts/error-handler.sh
          handle_exit_code $EXIT_CODE "import"
          
          # Exit with the result from error handler
          exit $EXIT_CODE
          