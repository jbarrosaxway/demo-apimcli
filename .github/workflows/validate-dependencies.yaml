name: Validate Dependencies
on:
  workflow_call:
    inputs:
      config-file:
        description: "API config file to validate dependencies for"
        type: string
        required: true
    outputs:
      org-created:
        description: "Whether organization was created"
        value: ${{ jobs.validate_dependencies.outputs.org_created }}
      apps-created:
        description: "Whether applications were created"
        value: ${{ jobs.validate_dependencies.outputs.apps_created }}

jobs:
  check_dependencies:
    runs-on: ubuntu-latest
    environment: DEMO
    outputs:
      org_exists: ${{ steps.check_org.outputs.exists }}
      org_file: ${{ steps.check_org.outputs.org_file }}
      org_data: ${{ steps.read_org_config.outputs.org_data }}
      apps_to_create: ${{ steps.check_apps.outputs.apps_to_create }}
      api_name: ${{ steps.api_info.outputs.api_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Extract API information
        id: api_info
        run: |
          config_file="${{ inputs.config-file }}"
          
          # Detect file type and extract information
          if [[ "$config_file" == *.yaml ]] || [[ "$config_file" == *.yml ]]; then
            # Use yq for YAML files
            api_name=$(yq -r '.name' "$config_file" 2>/dev/null || echo "")
            organization=$(yq -r '.organization' "$config_file" 2>/dev/null || echo "")
            apps=$(yq -r '.applications[].name' "$config_file" 2>/dev/null || echo "")
          else
            # Use jq for JSON files
            api_name=$(jq -r '.name' "$config_file" 2>/dev/null || echo "")
            organization=$(jq -r '.organization' "$config_file" 2>/dev/null || echo "")
            apps=$(jq -r '.applications[].name' "$config_file" 2>/dev/null || echo "")
          fi
          
          if [ -z "$api_name" ] || [ -z "$organization" ]; then
            echo "❌ Error: Could not extract API name or organization from config file"
            exit 1
          fi
          
          echo "📋 API Information:"
          echo "  Name: $api_name"
          echo "  Organization: $organization"
          echo "  Applications: $apps"
          
          # Set outputs for next steps
          echo "api_name=$api_name" >> $GITHUB_OUTPUT
          echo "organization=$organization" >> $GITHUB_OUTPUT
          echo "apps=$apps" >> $GITHUB_OUTPUT

      - name: Check Organization Exists
        id: check_org
        run: |
          organization="${{ steps.api_info.outputs.organization }}"
          echo "🏢 Checking if organization '$organization' exists..."
          
          # Check if organization exists
          result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim org get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -n "$organization" 2>/dev/null || echo "")
          
          if echo "$result" | grep -q "$organization"; then
            echo "✅ Organization '$organization' exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Organization '$organization' does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
            
            # Look for organization config file in Orgs folder
            org_file="examples/Orgs/${organization,,}-org.json"
            if [ -f "$org_file" ]; then
              echo "📁 Found organization config file: $org_file"
              echo "org_file=$org_file" >> $GITHUB_OUTPUT
            else
              echo "❌ No organization config file found for '$organization'"
              echo "Expected file: $org_file"
              echo "Available org files:"
              ls -la examples/Orgs/ || echo "No Orgs folder found"
              exit 1
            fi
          fi

      - name: Read Organization Config
        if: steps.check_org.outputs.exists == 'false'
        id: read_org_config
        run: |
          org_file="${{ steps.check_org.outputs.org_file }}"
          echo "📖 Reading organization config from: $org_file"
          
          # Extract organization info from JSON file
          org_data=$(jq -c '.' "$org_file")
          echo "org_data=$org_data" >> $GITHUB_OUTPUT



      - name: Check Applications Exist
        id: check_apps
        run: |
          apps="${{ steps.api_info.outputs.apps }}"
          apps_to_create=""
          
          if [ -n "$apps" ]; then
            echo "📱 Found applications in config: $apps"
            
            for app_name in $apps; do
              echo "🔍 Checking if application '$app_name' exists..."
              
              # Check if application exists
              result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim app get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -n "$app_name" 2>/dev/null || echo "")
              
              if echo "$result" | grep -q "$app_name"; then
                echo "✅ Application '$app_name' exists"
              else
                echo "❌ Application '$app_name' does not exist"
                
                # Look for application config file in Apps folder
                app_file="examples/Apps/${app_name,,}-app.json"
                if [ -f "$app_file" ]; then
                  echo "📁 Found application config file: $app_file"
                  apps_to_create="$apps_to_create $app_file"
                else
                  echo "⚠️ No application config file found for '$app_name'"
                  echo "Expected file: $app_file"
                  echo "Available app files:"
                  ls -la examples/Apps/ || echo "No Apps folder found"
                fi
              fi
            done
          else
            echo "📱 No applications found in config file"
          fi
          
          echo "apps_to_create=$apps_to_create" >> $GITHUB_OUTPUT



      - name: Validation Summary
        run: |
          echo "🎉 Dependencies validation completed!"
          echo "📋 Summary:"
          echo "  Organization: ${{ steps.check_org.outputs.exists }}"
          echo "  Applications: ${{ steps.check_apps.outputs.apps_to_create }}"
          echo "  API: ${{ steps.api_info.outputs.api_name }}"
          echo "  Config: ${{ inputs.config-file }}"

  create_organization:
    needs: check_dependencies
    if: needs.check_dependencies.outputs.org_exists == 'false'
    uses: ./.github/workflows/manage-organizations.yaml
    with:
      action: "create"
      org-name: ${{ fromJSON(needs.check_dependencies.outputs.org_data).name }}
      org-description: ${{ fromJSON(needs.check_dependencies.outputs.org_data).description }}
      org-email: ${{ fromJSON(needs.check_dependencies.outputs.org_data).email }}
      org-phone: ${{ fromJSON(needs.check_dependencies.outputs.org_data).phone }}
      org-enabled: ${{ fromJSON(needs.check_dependencies.outputs.org_data).enabled }}
      org-development: ${{ fromJSON(needs.check_dependencies.outputs.org_data).development }}
    secrets: inherit

  create_applications:
    needs: [check_dependencies, create_organization]
    if: needs.check_dependencies.outputs.apps_to_create != ''
    strategy:
      matrix:
        app_file: ${{ fromJson(needs.check_dependencies.outputs.apps_to_create) }}
    uses: ./.github/workflows/manage-applications.yaml
    with:
      action: "create"
      app-name: ${{ fromJSON(matrix.app_file).name }}
      org-name: ${{ fromJSON(matrix.app_file).organization }}
      app-description: ${{ fromJSON(matrix.app_file).description }}
      app-state: ${{ fromJSON(matrix.app_file).state }}
      app-enabled: ${{ fromJSON(matrix.app_file).enabled }}
      app-phone: ${{ fromJSON(matrix.app_file).phone }}
      app-email: ${{ fromJSON(matrix.app_file).email }}
    secrets: inherit 