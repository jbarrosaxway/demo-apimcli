name: Validate Dependencies
on:
  workflow_call:
    inputs:
      config-file:
        description: "API config file to validate dependencies for"
        type: string
        required: true
    outputs:
      org-created:
        description: "Whether organization was created"
        value: ${{ jobs.validate_dependencies.outputs.org_created }}
      apps-created:
        description: "Whether applications were created"
        value: ${{ jobs.validate_dependencies.outputs.apps_created }}

jobs:
  check_dependencies:
    runs-on: ubuntu-latest
    environment: DEMO
    outputs:
      org_exists: ${{ steps.check_org.outputs.exists }}
      org_file: ${{ steps.check_org.outputs.org_file }}
      org_data: ${{ steps.read_org_config.outputs.org_data }}
      apps_to_create: ${{ steps.check_apps.outputs.apps_to_create }}
      api_name: ${{ steps.api_info.outputs.api_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Extract API information
        id: api_info
        run: |
          config_file="${{ inputs.config-file }}"
          
          # Detect file type and extract information
          if [[ "$config_file" == *.yaml ]] || [[ "$config_file" == *.yml ]]; then
            # Use yq for YAML files
            api_name=$(yq -r '.name' "$config_file" 2>/dev/null || echo "")
            organization=$(yq -r '.organization' "$config_file" 2>/dev/null || echo "")
            apps=$(yq -r '.applications[].name' "$config_file" 2>/dev/null || echo "")
          else
            # Use jq for JSON files
            api_name=$(jq -r '.name' "$config_file" 2>/dev/null || echo "")
            organization=$(jq -r '.organization' "$config_file" 2>/dev/null || echo "")
            apps=$(jq -r '.applications[].name' "$config_file" 2>/dev/null || echo "")
          fi
          
          if [ -z "$api_name" ] || [ -z "$organization" ]; then
            echo "‚ùå Error: Could not extract API name or organization from config file"
            exit 1
          fi
          
          echo "üìã API Information:"
          echo "  Name: $api_name"
          echo "  Organization: $organization"
          echo "  Applications: $apps"
          
          # Set outputs for next steps
          echo "api_name=$api_name" >> $GITHUB_OUTPUT
          echo "organization=$organization" >> $GITHUB_OUTPUT
          echo "apps=$apps" >> $GITHUB_OUTPUT

      - name: Check Organization Exists
        id: check_org
        run: |
          organization="${{ steps.api_info.outputs.organization }}"
          echo "üè¢ Checking if organization '$organization' exists..."
          
          # Check if organization exists
          result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim org get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -n "$organization" 2>/dev/null || echo "")
          
          # Check if the result contains any 'not found' message or is empty
          if echo "$result" | grep -E -q "No organizations found|No organizations found based on the given criteria" || [ -z "$result" ]; then
            echo "‚ùå Organization '$organization' does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
            
            # Look for organization config file in Orgs folder
            org_file="examples/Orgs/${organization,,}-org.json"
            if [ -f "$org_file" ]; then
              echo "üìÅ Found organization config file: $org_file"
              echo "org_file=$org_file" >> $GITHUB_OUTPUT
            else
              echo "‚ùå No organization config file found for '$organization'"
              echo "Expected file: $org_file"
              echo "Available org files:"
              ls -la examples/Orgs/ || echo "No Orgs folder found"
              exit 1
            fi
          else
            echo "‚úÖ Organization '$organization' exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Read Organization Config
        if: steps.check_org.outputs.exists == 'false'
        id: read_org_config
        run: |
          org_file="${{ steps.check_org.outputs.org_file }}"
          echo "üìñ Reading organization config from: $org_file"
          
          # Extract organization info from JSON file
          org_data=$(jq -c '.' "$org_file")
          echo "org_data=$org_data" >> $GITHUB_OUTPUT



      - name: Check Applications Exist
        id: check_apps
        run: |
          apps="${{ steps.api_info.outputs.apps }}"
          apps_to_create=""
          
          if [ -n "$apps" ]; then
            echo "üì± Found applications in config: $apps"
            
            # Process each application (each line is a separate application)
            echo "$apps" | while IFS= read -r app_name; do
              if [ -n "$app_name" ]; then
                echo "üîç Checking if application '$app_name' exists..."
                
                # Check if application exists
                result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim app get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -n "$app_name" 2>/dev/null || echo "")
                
                # Check if the result contains any 'not found' message or is empty
                if echo "$result" | grep -E -q "No applications found|No applications found based on the given filters" || [ -z "$result" ]; then
                  echo "‚ùå Application '$app_name' does not exist"
                  
                  # Look for application config file in Apps folder
                  app_file="examples/Apps/${app_name,,}-app.json"
                  if [ -f "$app_file" ]; then
                    echo "üìÅ Found application config file: $app_file"
                    apps_to_create="$apps_to_create $app_file"
                  else
                    echo "‚ö†Ô∏è No application config file found for '$app_name'"
                    echo "Expected file: $app_file"
                    echo "Available app files:"
                    ls -la examples/Apps/ || echo "No Apps folder found"
                  fi
                else
                  echo "‚úÖ Application '$app_name' exists"
                fi
              fi
            done
          else
            echo "üì± No applications found in config file"
          fi
          
          echo "apps_to_create=$apps_to_create" >> $GITHUB_OUTPUT



      - name: Validation Summary
        run: |
          echo "üéâ Dependencies validation completed!"
          echo "üìã Summary:"
          echo "  Organization: ${{ steps.check_org.outputs.exists }}"
          echo "  Applications: ${{ steps.check_apps.outputs.apps_to_create }}"
          echo "  API: ${{ steps.api_info.outputs.api_name }}"
          echo "  Config: ${{ inputs.config-file }}"

  create_organization:
    needs: check_dependencies
    if: needs.check_dependencies.outputs.org_exists == 'false'
    runs-on: ubuntu-latest
    environment: DEMO
    steps:
      - name: Create Organization
        run: |
          org_file="${{ needs.check_dependencies.outputs.org_file }}"
          echo "üè¢ Creating organization from config file: $org_file"
          
          # Get the filename for docker mount
          org_file_name=$(basename "$org_file")
          org_file_dir=$(dirname "$org_file")
          
          echo "Importing organization using APIM CLI..."
          
          docker run --name apim-cli \
          -e LOG_LEVEL=DEBUG \
          -v "${{ github.workspace }}/$org_file:/$org_file_name" \
          bvieira123/apim-cli:1.14.4 \
          apim org import -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 \
          -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" \
          -c "/$org_file_name"
          
          docker rm apim-cli -f
          echo "‚úÖ Organization imported successfully!"

  create_applications:
    needs: [check_dependencies, create_organization]
    if: needs.check_dependencies.outputs.apps_to_create != ''
    runs-on: ubuntu-latest
    environment: DEMO
    steps:
      - name: Create Applications
        run: |
          apps_to_create="${{ needs.check_dependencies.outputs.apps_to_create }}"
          
          for app_file in $apps_to_create; do
            echo "üì± Creating application from: $app_file"
            
            # Extract application info from config file
            app_name=$(jq -r '.name' "$app_file")
            app_org=$(jq -r '.organization' "$app_file")
            app_description=$(jq -r '.description' "$app_file")
            app_state=$(jq -r '.state' "$app_file")
            app_enabled=$(jq -r '.enabled' "$app_file")
            app_phone=$(jq -r '.phone' "$app_file")
            app_email=$(jq -r '.email' "$app_file")
            
            echo "Creating application: $app_name in organization: $app_org"
            
            # Create application using docker directly (since we can't use workflow as step in a loop)
            docker run --name apim-cli \
            -e LOG_LEVEL=DEBUG \
            bvieira123/apim-cli:1.14.4 \
            apim app create -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 \
            -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" \
            --name "$app_name" \
            --org "$app_org" \
            --description "$app_description" \
            --state "$app_state" \
            --enabled "$app_enabled" \
            --phone "$app_phone" \
            --email "$app_email"
            
            docker rm apim-cli -f
            echo "‚úÖ Application '$app_name' created successfully!"
          done 