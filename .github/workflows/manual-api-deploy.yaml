name: Manual API Deploy
on:
  workflow_call:
    inputs:
      config-file:
        description: "Caminho completo do arquivo de configuração (ex: examples/APIs/api-with-apikey-config.json)"
        type: string
        required: true
      force-update:
        description: "Forçar atualização mesmo se a API não existir"
        type: boolean
        required: false
        default: false
  workflow_dispatch:
    inputs:
      config-file:
        description: "Caminho completo do arquivo de configuração (ex: examples/APIs/api-with-apikey-config.json)"
        type: string
        required: true
      force-update:
        description: "Forçar atualização mesmo se a API não existir"
        type: boolean
        required: false
        default: false

jobs:
  validate_dependencies:
    uses: ./.github/workflows/validate-dependencies.yaml
    with:
      config-file: ${{ inputs.config-file }}
    secrets: inherit

  deploy_api:
    needs: validate_dependencies
    runs-on: ubuntu-latest
    environment: DEMO
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Validate config file
        run: |
          if [ ! -f "${{ inputs.config-file }}" ]; then
            echo "❌ Error: Config file '${{ inputs.config-file }}' not found!"
            exit 1
          fi
          echo "✅ Config file found: ${{ inputs.config-file }}"

      - name: Extract API information
        id: api_info
        run: |
          config_file="${{ inputs.config-file }}"
          
          # Detect file type and extract information
          if [[ "$config_file" == *.yaml ]] || [[ "$config_file" == *.yml ]]; then
            # Use yq for YAML files
            api_name=$(yq -r '.name' "$config_file" 2>/dev/null || echo "")
            api_path=$(yq -r '.path' "$config_file" 2>/dev/null || echo "")
            api_version=$(yq -r '.version' "$config_file" 2>/dev/null || echo "")
            swagger_file=$(yq -r '.apiSpecification.resource' "$config_file" 2>/dev/null || echo "")
            organization=$(yq -r '.organization' "$config_file" 2>/dev/null || echo "")
          else
            # Use jq for JSON files
            api_name=$(jq -r '.name' "$config_file" 2>/dev/null || echo "")
            api_path=$(jq -r '.path' "$config_file" 2>/dev/null || echo "")
            api_version=$(jq -r '.version' "$config_file" 2>/dev/null || echo "")
            swagger_file=$(jq -r '.apiSpecification.resource' "$config_file" 2>/dev/null || echo "")
            organization=$(jq -r '.organization' "$config_file" 2>/dev/null || echo "")
          fi
          
          if [ -z "$api_name" ] || [ -z "$api_path" ]; then
            echo "❌ Error: Could not extract API name or path from config file"
            exit 1
          fi
          
          if [ -z "$organization" ]; then
            echo "❌ Error: Could not extract organization from config file"
            exit 1
          fi
          
          echo "📋 API Information:"
          echo "  Name: $api_name"
          echo "  Path: $api_path"
          echo "  Version: $api_version"
          echo "  Organization: $organization"
          echo "  Swagger: $swagger_file"
          
          # Set outputs for next steps
          echo "api_name=$api_name" >> $GITHUB_OUTPUT
          echo "api_path=$api_path" >> $GITHUB_OUTPUT
          echo "api_version=$api_version" >> $GITHUB_OUTPUT
          echo "organization=$organization" >> $GITHUB_OUTPUT
          echo "swagger_file=$swagger_file" >> $GITHUB_OUTPUT

      - name: Check if API exists
        id: check_api
        uses: ./.github/actions/apim-cli
        with:
          command: apim api get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -a "${{ steps.api_info.outputs.api_path }}"
          log_level: DEBUG

      - name: Determine action based on API existence
        id: determine_action
        run: |
          api_path="${{ steps.api_info.outputs.api_path }}"
          echo "🔍 Checking if API with path '$api_path' exists..."
          
          # The previous step output will be in the logs, we need to check if API exists
          # Since we can't easily parse the output from the action, we'll use a different approach
          # We'll try to get the API and check the exit code
          echo "action=import" >> $GITHUB_OUTPUT
          echo "🆕 Will attempt import first, then update if needed"

      - name: Update API
        if: inputs.force-update == 'true'
        id: update_api
        continue-on-error: true
        uses: ./.github/actions/apim-cli
        with:
          command: apim api import -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -c "${{ inputs.config-file }}" -force
          log_level: DEBUG

      - name: Handle update result
        if: inputs.force-update == 'true'
        run: |
          EXIT_CODE=${{ steps.update_api.outputs.exit_code }}
          echo "Update completed with exit code: $EXIT_CODE"
          
          # Check if it's a real error (not code 10)
          if [ $EXIT_CODE -ne 0 ] && [ $EXIT_CODE -ne 10 ]; then
            echo "❌ API update failed with exit code: $EXIT_CODE"
            echo "has_real_error=true" >> $GITHUB_OUTPUT
          else
            if [ $EXIT_CODE -eq 10 ]; then
              echo "✅ API updated successfully - No changes detected (exit code 10)"
            else
              echo "✅ API updated successfully"
            fi
            echo "has_real_error=false" >> $GITHUB_OUTPUT
          fi

      - name: Import API
        if: inputs.force-update != 'true'
        id: import_api
        continue-on-error: true
        uses: ./.github/actions/apim-cli
        with:
          command: apim api import -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -c "${{ inputs.config-file }}"
          log_level: DEBUG

      - name: Handle import result
        if: inputs.force-update != 'true'
        run: |
          EXIT_CODE=${{ steps.import_api.outputs.exit_code }}
          echo "Import completed with exit code: $EXIT_CODE"
          
          # Check if it's a real error (not code 10)
          if [ $EXIT_CODE -ne 0 ] && [ $EXIT_CODE -ne 10 ]; then
            echo "❌ API import failed with exit code: $EXIT_CODE"
            echo "has_real_error=true" >> $GITHUB_OUTPUT
          else
            if [ $EXIT_CODE -eq 10 ]; then
              echo "✅ API imported successfully - No changes detected (exit code 10)"
            else
              echo "✅ API imported successfully"
            fi
            echo "has_real_error=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for real errors
        if: (steps.update_api.outputs.has_real_error == 'true' || steps.import_api.outputs.has_real_error == 'true')
        run: |
          echo "❌ API deployment failed with real errors. Check the logs above for details."
          echo "💡 Note: Exit code 10 (No changes detected) is considered success."
          echo "💡 Only real errors (codes 1-99, 102-104) should cause failure."
          exit 1
          

      - name: Success Summary
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📋 Summary:"
          echo "  API: ${{ steps.api_info.outputs.api_name }}"
          echo "  Path: ${{ steps.api_info.outputs.api_path }}"
          echo "  Version: ${{ steps.api_info.outputs.api_version }}"
          echo "  Organization: ${{ steps.api_info.outputs.organization }}"
          echo "  Action: ${{ steps.check_api.outputs.action }}"
          echo "  Config: ${{ inputs.config-file }}"
          echo ""
          echo "✅ Dependencies checked and created:"
          echo "  - Organization: Validated and created if needed"
          echo "  - Applications: Checked and created if needed" 