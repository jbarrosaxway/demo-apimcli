name: Manual API Deploy
on:
  workflow_dispatch:
    inputs:
      config-file:
        description: "Caminho completo do arquivo de configuração (ex: examples/APIs/api-with-apikey-config.json)"
        type: string
        required: true
      force-update:
        description: "Forçar atualização mesmo se a API não existir"
        type: boolean
        required: false
        default: false

jobs:
  deploy_api:
    runs-on: ubuntu-latest
    environment: DEMO
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Validate config file
        run: |
          if [ ! -f "${{ inputs.config-file }}" ]; then
            echo "❌ Error: Config file '${{ inputs.config-file }}' not found!"
            exit 1
          fi
          echo "✅ Config file found: ${{ inputs.config-file }}"

      - name: Extract API information
        id: api_info
        run: |
          config_file="${{ inputs.config-file }}"
          
          # Detect file type and extract information
          if [[ "$config_file" == *.yaml ]] || [[ "$config_file" == *.yml ]]; then
            # Use yq for YAML files
            api_name=$(yq -r '.name' "$config_file" 2>/dev/null || echo "")
            api_path=$(yq -r '.path' "$config_file" 2>/dev/null || echo "")
            api_version=$(yq -r '.version' "$config_file" 2>/dev/null || echo "")
            swagger_file=$(yq -r '.apiSpecification.resource' "$config_file" 2>/dev/null || echo "")
            organization=$(yq -r '.organization' "$config_file" 2>/dev/null || echo "")
          else
            # Use jq for JSON files
            api_name=$(jq -r '.name' "$config_file" 2>/dev/null || echo "")
            api_path=$(jq -r '.path' "$config_file" 2>/dev/null || echo "")
            api_version=$(jq -r '.version' "$config_file" 2>/dev/null || echo "")
            swagger_file=$(jq -r '.apiSpecification.resource' "$config_file" 2>/dev/null || echo "")
            organization=$(jq -r '.organization' "$config_file" 2>/dev/null || echo "")
          fi
          
          if [ -z "$api_name" ] || [ -z "$api_path" ]; then
            echo "❌ Error: Could not extract API name or path from config file"
            exit 1
          fi
          
          if [ -z "$organization" ]; then
            echo "❌ Error: Could not extract organization from config file"
            exit 1
          fi
          
          echo "📋 API Information:"
          echo "  Name: $api_name"
          echo "  Path: $api_path"
          echo "  Version: $api_version"
          echo "  Organization: $organization"
          echo "  Swagger: $swagger_file"
          
          # Set outputs for next steps
          echo "api_name=$api_name" >> $GITHUB_OUTPUT
          echo "api_path=$api_path" >> $GITHUB_OUTPUT
          echo "api_version=$api_version" >> $GITHUB_OUTPUT
          echo "organization=$organization" >> $GITHUB_OUTPUT
          echo "swagger_file=$swagger_file" >> $GITHUB_OUTPUT

      - name: Check and Create Organization
        id: check_org
        run: |
          organization="${{ steps.api_info.outputs.organization }}"
          echo "🏢 Checking if organization '$organization' exists..."
          
          # Check if organization exists
          result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim org get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -n "$organization" 2>/dev/null || echo "")
          
          if echo "$result" | grep -q "$organization"; then
            echo "✅ Organization '$organization' exists"
            echo "org_exists=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Organization '$organization' does not exist"
            echo "org_exists=false" >> $GITHUB_OUTPUT
            
            # Look for organization config file in Orgs folder
            org_file="examples/Orgs/${organization,,}-org.json"
            if [ -f "$org_file" ]; then
              echo "📁 Found organization config file: $org_file"
              echo "org_file=$org_file" >> $GITHUB_OUTPUT
            else
              echo "❌ No organization config file found for '$organization'"
              echo "Expected file: $org_file"
              echo "Available org files:"
              ls -la examples/Orgs/ || echo "No Orgs folder found"
              exit 1
            fi
          fi

      - name: Create Organization
        if: steps.check_org.outputs.org_exists == 'false'
        needs: check_org
        run: |
          org_file="${{ steps.check_org.outputs.org_file }}"
          echo "🏢 Creating organization from config file: $org_file"
          
          # Extract organization info from config file
          org_name=$(jq -r '.name' "$org_file")
          org_description=$(jq -r '.description' "$org_file")
          org_email=$(jq -r '.email' "$org_file")
          org_phone=$(jq -r '.phone' "$org_file")
          org_enabled=$(jq -r '.enabled' "$org_file")
          org_development=$(jq -r '.development' "$org_file")
          
          echo "Creating organization: $org_name"
          echo "Description: $org_description"
          echo "Email: $org_email"
          
          docker run --name apim-cli \
          -e LOG_LEVEL=DEBUG \
          bvieira123/apim-cli:1.14.4 \
          apim org create -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 \
          -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" \
          --name "$org_name" \
          --description "$org_description" \
          --email "$org_email" \
          --phone "$org_phone" \
          --enabled "$org_enabled" \
          --development "$org_development"
          
          docker rm apim-cli -f
          echo "✅ Organization '$org_name' created successfully!"

      - name: Check and Create Applications
        id: check_apps
        needs: [check_org, create_organization]
        run: |
          config_file="${{ inputs.config-file }}"
          
          # Extract applications from config file
          if [[ "$config_file" == *.yaml ]] || [[ "$config_file" == *.yml ]]; then
            # Use yq for YAML files - extract application names
            apps=$(yq -r '.applications[].name' "$config_file" 2>/dev/null || echo "")
          else
            # Use jq for JSON files - extract application names
            apps=$(jq -r '.applications[].name' "$config_file" 2>/dev/null || echo "")
          fi
          
          if [ -n "$apps" ]; then
            echo "📱 Found applications in config: $apps"
            
            for app_name in $apps; do
              echo "🔍 Checking if application '$app_name' exists..."
              
              # Check if application exists
              result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim app get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -n "$app_name" 2>/dev/null || echo "")
              
              if echo "$result" | grep -q "$app_name"; then
                echo "✅ Application '$app_name' exists"
              else
                echo "❌ Application '$app_name' does not exist"
                
                # Look for application config file in Apps folder
                app_file="examples/Apps/${app_name,,}-app.json"
                if [ -f "$app_file" ]; then
                  echo "📁 Found application config file: $app_file"
                  
                  # Extract application info and create it
                  app_org=$(jq -r '.organization' "$app_file")
                  app_description=$(jq -r '.description' "$app_file")
                  app_state=$(jq -r '.state' "$app_file")
                  app_enabled=$(jq -r '.enabled' "$app_file")
                  app_phone=$(jq -r '.phone' "$app_file")
                  app_email=$(jq -r '.email' "$app_file")
                  
                  echo "Creating application: $app_name in organization: $app_org"
                  
                  docker run --name apim-cli \
                  -e LOG_LEVEL=DEBUG \
                  bvieira123/apim-cli:1.14.4 \
                  apim app create -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 \
                  -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" \
                  --name "$app_name" \
                  --org "$app_org" \
                  --description "$app_description" \
                  --state "$app_state" \
                  --enabled "$app_enabled" \
                  --phone "$app_phone" \
                  --email "$app_email"
                  
                  docker rm apim-cli -f
                  echo "✅ Application '$app_name' created successfully!"
                else
                  echo "⚠️ No application config file found for '$app_name'"
                  echo "Expected file: $app_file"
                  echo "Available app files:"
                  ls -la examples/Apps/ || echo "No Apps folder found"
                fi
              fi
            done
          else
            echo "📱 No applications found in config file"
          fi

      - name: Check if API exists
        id: check_api
        needs: [check_org, create_organization, check_apps]
        run: |
          api_path="${{ steps.api_info.outputs.api_path }}"
          echo "🔍 Checking if API with path '$api_path' exists..."
          
          result=$(docker run --rm bvieira123/apim-cli:1.14.4 apim api get -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -a "$api_path" 2>/dev/null || echo "")
          
          if echo "$result" | grep -q "$api_path"; then
            echo "✅ API exists - will UPDATE"
            echo "action=update" >> $GITHUB_OUTPUT
          else
            echo "🆕 API does not exist - will IMPORT"
            echo "action=import" >> $GITHUB_OUTPUT
          fi

      - name: Update API
        if: steps.check_api.outputs.action == 'update' || inputs.force-update == 'true'
        run: |
          config_file="${{ inputs.config-file }}"
          config_file_name=$(basename "$config_file")
          current_folder=$(dirname "$config_file")
          swagger_file="${{ steps.api_info.outputs.swagger_file }}"
          
          echo "🔄 Updating API: ${{ steps.api_info.outputs.api_name }}"
          echo "📁 Config file: $config_file"
          echo "📄 Swagger file: $swagger_file"
          
          # Mount both config and swagger files
          docker run --name apim-cli \
          -e LOG_LEVEL=DEBUG \
          -v "${{ github.workspace }}/$config_file:/$config_file_name" \
          -v "${{ github.workspace }}/$current_folder/$swagger_file:/$swagger_file" \
          bvieira123/apim-cli:1.14.4 \
          apim api import -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 \
          -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -c "/$config_file_name" -force
          
          docker rm apim-cli -f
          echo "✅ API updated successfully!"

      - name: Import API
        if: steps.check_api.outputs.action == 'import' && inputs.force-update != 'true'
        run: |
          config_file="${{ inputs.config-file }}"
          config_file_name=$(basename "$config_file")
          current_folder=$(dirname "$config_file")
          swagger_file="${{ steps.api_info.outputs.swagger_file }}"
          
          echo "📥 Importing API: ${{ steps.api_info.outputs.api_name }}"
          echo "📁 Config file: $config_file"
          echo "📄 Swagger file: $swagger_file"
          
          # Mount both config and swagger files
          docker run --name apim-cli \
          -e LOG_LEVEL=DEBUG \
          -v "${{ github.workspace }}/$config_file:/$config_file_name" \
          -v "${{ github.workspace }}/$current_folder/$swagger_file:/$swagger_file" \
          bvieira123/apim-cli:1.14.4 \
          apim api import -h "${{ vars.APIM_INSTANCE_IP }}" -u "${{ vars.APIM_INSTANCE_USER }}" -port 8075 \
          -p "${{ secrets.APIM_INSTANCE_PASSWORD }}" -c "/$config_file_name"
          
          docker rm apim-cli -f
          echo "✅ API imported successfully!"

      - name: Cleanup
        if: failure()
        run: |
          docker rm apim-cli -f

      - name: Success Summary
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📋 Summary:"
          echo "  API: ${{ steps.api_info.outputs.api_name }}"
          echo "  Path: ${{ steps.api_info.outputs.api_path }}"
          echo "  Version: ${{ steps.api_info.outputs.api_version }}"
          echo "  Organization: ${{ steps.api_info.outputs.organization }}"
          echo "  Action: ${{ steps.check_api.outputs.action }}"
          echo "  Config: ${{ inputs.config-file }}"
          echo ""
          echo "✅ Dependencies checked and created:"
          echo "  - Organization: ${{ steps.check_org.outputs.org_exists }}"
          echo "  - Applications: Checked and created if needed" 