name: Manage Application Subscriptions
on:
  workflow_call:
    inputs:
      config-file:
        description: "config file for the API"
        type: string
        required: true
      action:
        description: "action to perform (grant or revoke)"
        type: string
        required: true
        default: "grant"
      application:
        description: "application name to grant/revoke permissions"
        type: string
        required: true
      organization:
        description: "organization name for the application"
        type: string
        required: true
  workflow_dispatch:
    inputs:
      config-file:
        description: "config file for the API"
        type: string
        required: true
      action:
        description: "action to perform (grant or revoke)"
        type: string
        required: true
        default: "grant"
      application:
        description: "application name to grant/revoke permissions"
        type: string
        required: true
      organization:
        description: "organization name for the application"
        type: string
        required: true

jobs:
  manage_subscriptions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Manage Application Subscriptions
        run: |
          echo "Managing application subscriptions..."
          echo "Processing ${{ inputs.config-file }} config file"
          config_file_name=$(basename ${{ inputs.config-file }})
          current_folder=$(dirname ${{ inputs.config-file }})
          
          # Extract API name from config file
          API_NAME=$(jq -r '.name' ${{ inputs.config-file }})
          echo "API Name: $API_NAME"
          echo "Application: ${{ inputs.application }}"
          echo "Organization: ${{ inputs.organization }}"
          echo "Action: ${{ inputs.action }}"
          
          # Grant permission to application
          if [ "${{ inputs.action }}" = "grant" ]; then
            echo "Granting permission to application ${{ inputs.application }}..."
            docker run --name apim-cli \
            -e LOG_LEVEL=DEBUG -v "${{ github.workspace }}/${{ inputs.config-file }}:/$config_file_name" \
            bvieira123/apim-cli:1.14.4 \
            apim api grant-access -h ${{ vars.APIM_INSTANCE_IP }} -u ${{ vars.APIM_INSTANCE_USER }} -port 8075 \
            -p ${{ secrets.APIM_INSTANCE_PASSWORD }} -n "$API_NAME" \
            --org "${{ inputs.organization }}" \
            --app "${{ inputs.application }}"
          fi
          
          # Revoke permission from application
          if [ "${{ inputs.action }}" = "revoke" ]; then
            echo "Revoking permission from application ${{ inputs.application }}..."
            docker run --name apim-cli \
            -e LOG_LEVEL=DEBUG -v "${{ github.workspace }}/${{ inputs.config-file }}:/$config_file_name" \
            bvieira123/apim-cli:1.14.4 \
            apim api revoke-access -h ${{ vars.APIM_INSTANCE_IP }} -u ${{ vars.APIM_INSTANCE_USER }} -port 8075 \
            -p ${{ secrets.APIM_INSTANCE_PASSWORD }} -n "$API_NAME" \
            --org "${{ inputs.organization }}" \
            --app "${{ inputs.application }}"
          fi
          
          docker rm apim-cli -f
      
      - name: Cleanup
        if: failure()
        run: |
          docker rm apim-cli -f 